// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id        String   @id @default(uuid())
  name      String
  bio       String
  birthdate DateTime

  books Book[]

  @@map("authors")
}

model Book {
  id               String @id @default(uuid())
  title            String
  isbn             String
  publication_year Int
  genre            String
  author_id        String

  author   Author         @relation(fields: [author_id], references: [id])
  products BooksProduct[]

  @@map("books")
}

model BooksProduct {
  id           String  @id @default(uuid())
  book_id      String
  price        Decimal @db.Decimal(10, 2)
  stock        Int
  format       String
  warehouse_id String

  book          Book          @relation(fields: [book_id], references: [id])
  warehouse     Warehouse     @relation(fields: [warehouse_id], references: [id])
  invoice_items InvoiceItem[]
  cart_items    CartItem[]

  @@map("books_product")
}

model Warehouse {
  id       String @id @default(uuid())
  name     String
  location String
  capacity Int

  products BooksProduct[]

  @@map("warehouses")
}

model InvoiceItem {
  id               String  @id @default(uuid())
  books_product_id String
  price            Decimal @db.Decimal(10, 2)
  invoice_id       String

  product BooksProduct @relation(fields: [books_product_id], references: [id])
  invoice Invoice      @relation(fields: [invoice_id], references: [id])

  @@map("invoice_items")
}

model Invoice {
  id           String   @id @default(uuid())
  total_amount Decimal  @db.Decimal(10, 2)
  issued_at    DateTime @default(now())
  status       String
  customer_id  String
  cart_id      String

  customer Customer      @relation(fields: [customer_id], references: [id])
  cart     Cart          @relation(fields: [cart_id], references: [id])
  items    InvoiceItem[]

  @@map("invoices")
}

model CartItem {
  id               String   @id @default(uuid())
  books_product_id String
  quantity         Int
  created_at       DateTime @default(now())
  cart_id          String

  product BooksProduct @relation(fields: [books_product_id], references: [id])
  cart    Cart         @relation(fields: [cart_id], references: [id])

  @@map("cart_items")
}

model Cart {
  id          String   @id @default(uuid())
  customer_id String   @unique
  created_at  DateTime @default(now())

  customer Customer   @relation(fields: [customer_id], references: [id])
  items    CartItem[]
  invoices Invoice[]

  @@map("cart")
}

model Customer {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  address  String
  phone    String

  cart     Cart?
  invoices Invoice[]

  @@map("customers")
}
